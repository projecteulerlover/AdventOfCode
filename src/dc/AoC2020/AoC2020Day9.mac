ROUTINE AoC2020Day9

/// key takewways: part1->sliding window solution, part2->partial sums hash map solution

Start() PUBLIC {
	s input="/irisdev/app/inputs/2020/input9.txt"
	d readInput(input, .nums)
	s t1 = $p($zts,",",2)
	s ans1 = $$part1(.nums)
	s t2 = $p($zts,",",2)
	s ans2 = $$part2(.nums, ans1)
	s t3 = $p($zts,",",2)

	s p1time="Part1: "_(t2-t1)
	s p2time="Part2: "_(t3-t2)
	zw p1time
	zw p2time
	return ans1_"^"_ans2
}

part1(nums) PUBLIC {
	s window = 25
	for i=1:1:window {
		s curr(nums(i)) = $g(curr(nums(i))) + 1
	}
	
	for i=window+1:1:nums {
		s c=nums(i)
		s p=nums(i-window)
		
		s x=""
		s found = 0

		for {
			s x = $order(curr(x))
			if 'x quit
			
			if $data(curr(c-x)) {
				s found = 1
				quit
			}
		}
		if 'found return c
		
		s curr(p) = curr(p) - 1
		if curr(p)=0 kill curr(p)
		s curr(c) = $get(curr(c)) + 1
	}
	
	return "should not get here"
}

part2(nums, targ) PUBLIC {
	s partials = nums
	s p = 0
	
	for i=1:1:nums {
		s p = p + nums(i)
		s partials(p) = i
		if $d(partials(p-targ)) {
			s start = partials(p-targ)+1
			s end = i
			
			s max=0, min=targ
			for j=start:1:end {
				if nums(j) > max s max = nums(j)
				if nums(j) < min s min = nums(j)
			}
			return max+min
		}
	}
	return "should not get here"
}

readInput(input, result) PUBLIC {
	set file = ##class(%Stream.FileCharacter).%New()
	s sc = file.LinkToFile(input)
	s i = 0
	while 'file.AtEnd {
		s i = i+1
		s result(i) = $translate(file.ReadLine(), $c(13))
	}
	s result = i
}

