ROUTINE AoC2020Day11

/// main takeway: don't use $s for min/max functions. for part 2, explore in each 8 directions until you see a tile which isn't the floor.

Start() PUBLIC {
	s input="/irisdev/app/inputs/2020/input11.txt"
	d readInput(input, .in)
	
	for {
		set c = $$run(.in, .out, 0)
		kill in
		merge in = out
		kill out
		if c=0 quit
	}
	s ans1 = $$getCount(.in)

    kill in
    d readInput(input, .in)
    for {
		set c = $$run(.in, .out)
		kill in
		merge in = out
		kill out
		if c=0 quit

	}
	s ans2 = $$getCount(.in)
	return ans1_"^"_ans2

}

getCount(in) PUBLIC {
	s m = $p(in, "^"), n = $p(in, "^", 2)
	s total = 0
	for i=1:1:m {
		for j=1:1:n{
			if in(i, j)="#" s total=total+1
		}
	}
	return total
}

getNeighbors(i, j, in) PUBLIC {
	s total = 0
	s m = $p(in, "^"), n = $p(in, "^", 2)

	for a=$s((i-1) > 1: i-1, 1: 1):1:$s((i+1) > m: m, 1: i+1) {
		for b=$s((j-1) > 1: j-1, 1: 1):1:$s((j+1) > n: n, 1: j+1) {
			if (a=i)&&(b=j) continue	
	    	if in(a, b)="#" s total = total + 1
		}
	}
	return total
}

getNeighbors2(i, j, in) PUBLIC {
    s total = 0
	s m = $p(in, "^"), n = $p(in, "^", 2)

    for dy=-1:1:1 {
        for dx=-1:1:1 {
            if (dx=0) && (dy=0) continue
            s ni=i+dy, nj=j+dx
            while (1<=ni) && (ni<=m) && (1<=nj) && (nj<=n) && (in(ni,nj)=".") {
                s ni=ni+dy, nj=nj+dx
            }
            s total = total + ((1<=ni) && (ni<=m) && (1<=nj) && (nj<=n) && (in(ni,nj)="#"))
        }
    }
    
    return total
}



run(in, out, p2=1) {
	s c = 0
	s out = in
	s m = $p(in, "^"), n = $p(in, "^", 2)
	
	for i=1:1:m {
		for j = 1:1:n {
			s total = $s(p2:$$getNeighbors2(i, j, .in), 1:$$getNeighbors(i, j, .in))
			if (in(i, j)="L") && (total = 0) {
				s out(i, j) = "#"
				s c = 1
			} elseif (in(i, j)="#" && (total >= $s(p2:5, 1:4))) {
				s out(i, j) = "L"
				s c = 1
			} else {
				s out(i, j)= in(i, j)
			}
		}
	}
	
	return c
}


readInput(input, result) PUBLIC {
	set file = ##class(%Stream.FileCharacter).%New()
	s sc = file.LinkToFile(input)
	s i = 0
	while 'file.AtEnd {
		s i = i + 1
		s curr = $translate(file.ReadLine(), $c(13))
		for j=1:1:$length(curr) {
			s result(i, j) = $extract(curr, j)
		}
	}
	s result = i_"^"_j
}

