ROUTINE AoC2020Day14

/// main take aways: 
/// part 1: we can use bitmask operations to quickly simulate the mask operation (see applyMasks)
/// part 2: to reuse code from part 1, notice for the new masking operation in this part we have
///         X's can be both 0's or 1's, so we add two new masks in our mask set with X replaced with 0
///         and X replaced with 1
///         1's always set itself, this is the same as part 1, so we add the current mask to the mask set
///         0's are wilds, so we replace it with an X
/// this allows us to create a set of masks which have the same application rules as in part 1
/// further thoughts: if X's appears more times in any given mask, how do we tackle this? Perhaps a 2-D segment tree
///                   but still not that easy, because the wild parts can come in disjoint pieces.

Start() PUBLIC {
	s input="/irisdev/app/inputs/2020/input14.txt"
	d readInput(input, .in)
	
	do p1(.in, .mem)
	s a = ""
	s ans1 = 0
	for {
		s a = $o(mem(a), 1, targ)
		if a="" quit
		
		s ans1 = ans1 + targ
	}
    kill mem

    do p2(.in, .mem)
	s a = ""
	s ans2 = 0
	for {
		s a = $o(mem(a), 1, targ)
		if a="" quit
		
		s ans2 = ans2 + targ
	}
    return ans1_"^"_ans2
}

applyMasks(mask, v) PUBLIC {
	s ormask = +$$getBase10($tr(mask, "X", 0),2)
	s andmask = +$$getBase10($tr(mask, "X", 1),2)
	s v = $zboolean(v, ormask, 7)
	s v = $zboolean(v, andmask, 1)
	return v
}

p1(in, mem) PUBLIC {
	for i=1:1:in {
		s curr = in(i)
		if $length(curr, "^") = 1 {
			s mask = curr
			
			continue
		}
		s a=+$p(curr, "^"), v=+$p(curr, "^", 2)        
		s mem(a)=$$applyMasks(mask, v)
	}
}

getQuantum(quantum, mask) PUBLIC {
    s quantum(0, mask) = ""
    for i=1:1:$length(mask) {
        s c = ""
        s d = 0
		s prev = i-1
        for {
            s c = $o(quantum(prev, c))
            if c="" quit
            s bit = $extract(c, i)
			s mask = c
			if bit=0 {
				s $extract(mask, i) = "X"
				s quantum(i, mask) = ""
			} elseif bit=1 {
				s $extract(mask, i) = "1"
				s quantum(i, mask) = ""
			} else { // bit = "X"
				s $extract(mask, i) = "0"
				s quantum(i, mask) = ""
				s $extract(mask, i) = "1"
				s quantum(i, mask) = ""
			}
        }
        // not required, just for easier printouts
        k quantum(prev)
        s prev = i
    }
}

p2(in, mem) PUBLIC {
	for i=1:1:in {
		s curr = in(i)
		if $length(curr, "^") = 1 {
			s mask = curr
			continue
		}
		s a=+$p(curr, "^"), v=+$p(curr, "^", 2)
        kill quantum
        d getQuantum(.quantum, mask)
        s q = ""
        for {
            s q = $o(quantum(36, q))
            if q="" quit

			s m = q
			s mem($$applyMasks(q, a)) = v
		}
	}
}

getBase10(a, b) PUBLIC {
	s c = 0
	for i=1:1:$length(a) {
		s c = c * b
		s c = c + $extract(a, i)
	}
	quit c
}

readInput(input, result) PUBLIC {
	set file = ##class(%Stream.FileCharacter).%New()
	s sc = file.LinkToFile(input)
	s i = 0
	while 'file.AtEnd {
		s i = i+1
		s curr = $translate(file.ReadLine(), $c(13))
		s o=$p(curr, " = "), v=$p(curr, " = ", 2)
		if o="mask" {
			s result(i)=v
		} else {
			s a=$e(o, 5, *-1)
			s result(i)=a_"^"_v
		}
	}
	s result = i
}

