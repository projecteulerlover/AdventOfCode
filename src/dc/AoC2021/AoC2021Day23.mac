ROUTINE AoC2021Day23

Start() public {
	d readInput("/irisdev/app/inputs/2021/23.in", .x)

	d constants(.cost, .htr)

    return $$p1(x, .cost, .htr)_"^"_$$p2(x, .cost, .htr)
}

#; 12 3 4 5 67
#;   1 2 3 4
constants(cost, halltoroom) PUBLIC {
	s cost(1)=1, cost(2)=10, cost(3)=100, cost(4)=1000
	
	for i=1:1:4 {
		s halltoroom(1, i) = 2*i
		for j=2:1:11 {
			s halltoroom(j, i) = halltoroom(j-1, i)-1
		}
	}
}

#; heuristic for A*. For a given state, computes the cost of moving
#; all amphipods to their correct space ignoring collision.
h(x, cost, htr) public {
	s m(1)=0, m(2)=0, m(3)=0, m(4)=0
	
	s t = 0
	for i=1:1:4 {
		s ri = $lg(x, i)
		for j=1:1:$l(ri) {
			s c = $e(ri, j)
			if c=0 continue
			if c '= i {
				// diff room; move to hall, move to room
				s d = j + (2*$zabs(i-c))
				s m(c) = m(c) + 1
				s t = t + (cost(c)*d)
			}
		}
	}
	s hall = $lg(x, 5)
	for i=1:1:$l(hall) {
		s c = $e(hall, i)
		if c=0 continue
		s m(c) = m(c)+1
		s t = t + (cost(c)*htr(i, c))
	}
	for c=1:1:4 {
		s t = t + (m(c)*(m(c)+1)\2 * cost(c))
	}
	return t
}

f(x) {
	for i=1:1:4 {
		s ri = $lg(x, i)
		for j=1:1:$l(ri) {
			if $e(ri, j) '= i {
				return 0
			}
		}
	}
	return 1
}

sgn(a) {
	return $s(a >= 0:1, 1:-1)
}

visitable(c, i, x, htr, dist) {
	s room = $lg(x, c)
	s hall = $lg(x, 5)
	for j=1:1:$l(room) {
		if ($e(room, j) '= 0) && ($e(room, j) '= c) {
			return 0
		}
	}
	s dist = htr(i, c)
	s sgn = $$sgn(dist)
	for j=i+sgn:sgn:i+dist {
		if $e(hall, j) '= 0 {
			return 0
		}
	}
	for rd=1:1:$l(room) {
		if $e(room, rd) '= 0 {
			s rd = rd-1
			q
		}
	}
	s dist = $zabs(dist) + rd
	
	s $e(hall, i) = "0"
	s $list(x, 5) = hall

	s $e(room, rd) = c
	s $list(x, c) = room

	return 1
}

min(a, b) {
	if a<b return a
	return b
}

max(a, b) {
	if a>b return a
	return b
}

blocked(hall, i, j) {
	for k=$$min(i, j):1:$$max(i, j) {
		if $e(hall, k) '= "0" {
			return 1
		}
	}
	return 0
}

astar(x, cost, htr, states) public {
	if $$f(x) return 0
	if ($d(states(x), v)) return v

	s hall = $lg(x, 5)
	for i=1:1:$l(hall) {
		s c = $e(hall, i)
		if (c=0) continue
		s y = x
		if $$visitable(c, i, .y, .htr, .dist) {
			s tc = (dist*cost(c)) + $$astar(y, .cost, .htr, .states)
			s states(x) = tc
			return tc
		}
	}
	s mindist = 1e10
	for i=1:1:4 {
		s ri = $lg(x, i)
		
		s m = 0
		s dist = 1
		for j=1:1:$l(ri) {
			s c = $e(ri, j)
			if (c '= "0") && (c '=  i) {
				s m = 1
				q
			}
			if (c = "0") s dist = dist + 1
		}
		if m = 0 continue
		s m = $e(ri, dist)
		
		s rl = 2*i+1
		for h=1:1:11 {
			if (h=3) || (h=5) || (h=7) || (h=9) || $$blocked(.hall, h, rl) {
				continue
			}
			s nri = ri
			s $e(nri, dist) = "0"

			s ndist = dist + $zabs(h - rl)

			s nhall = hall
			s $e(nhall, h) = m

			s nx = x
			s $list(nx, i) = nri
			s $list(nx, 5) = nhall

			s mindist = $$min(mindist, (ndist*cost(m)) + $$astar(nx, .cost, .htr, .states))
		}	
	}
	s states = states + 1
	s states(x) = mindist
	return mindist
}

p1(x, cost, htr) public {
	s states = 0
	return $$astar(x, .cost, .htr, .states)
}

p2(x, cost, htr) public {
	s nr1 = $list(x, 1)
	s $list(x, 1) = $e(nr1, 1)_"44"_$e(nr1, 2)
	s nr2 = $list(x, 2)
	s $list(x, 2) = $e(nr2, 1)_"32"_$e(nr2, 2)
	s nr3 = $list(x, 3)
	s $list(x, 3) = $e(nr3, 1)_"21"_$e(nr3, 2)
	s nr4 = $list(x, 4)
	s $list(x, 4) = $e(nr4, 1)_"13"_$e(nr4, 2)
	s states = 0
	s states2 = 0
	return $$astar(x, .cost, .htr, .states)
}

readInput(input, result) PUBLIC {
	set file = ##class(%Stream.FileCharacter).%New()
	s sc = file.LinkToFile(input)
	d file.ReadLine()
	s m("A")=1, m("B")=2, m("C")=3, m("D")=4, m(".")=0
	s result = $lb()
	s line = file.ReadLine()
	s k = 0
	for i=1:1:$l(line) {
		s c = $e(line, i)
		if $d(m(c)) {
			s k = k+1
			s $list(result, 5) = $listget(result, 5)_m(c)
		} 
	}

	while 'file.AtEnd {
		s line = $translate(file.ReadLine(), $c(13))
		s k = 0
		for i=1:1:$l(line) {
			s c = $e(line, i)
			if $d(m(c)) {
				s k = k+1
				s $list(result, k) = $listget(result, k)_m(c)
			} 
		}
	}
}